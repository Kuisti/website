{"version":3,"sources":["components/three/kuisti.glb","kuisti.png","components/three/Kuisti.js","components/three/index.tsx","components/logo/index.tsx","components/countdown/index.tsx","components/WelcomeToEnjoy/index.tsx","App.tsx","serviceWorker.ts","i18n.ts","index.tsx"],"names":["module","exports","Model","props","group","useRef","useLoader","GLTFLoader","kuisti","nodes","materials","ref","dispose","name","rotation","Math","PI","castShadow","receiveShadow","material","geometry","Mesh_Mesh_head_geo001_lambert2SG001","Box","mesh","useFrame","current","x","y","args","color","Plane","attach","Camera","useState","angle","setAngle","setDefaultCamera","useThree","useEffect","cos","z","sin","position","lookAt","THREE","updateMatrixWorld","Three","className","shadowMap","intensity","shadow-mapSize-width","shadow-mapSize-height","shadow-camera-far","shadow-camera-left","shadow-camera-right","shadow-camera-top","shadow-camera-bottom","fallback","scale","Logo","alt","src","logo","CountDown","date","Date","WelcomeToEnjoy","t","useTranslation","App","Boolean","window","location","hostname","match","resources","en","common","fi","de","ru","i18n","use","LanguageDetector","initReactI18next","init","detection","order","ns","fallbackLng","supportedLngs","interpolation","escapeValue","debug","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,oC,mBCA3CD,EAAOC,QAAU,IAA0B,oC,kyBCK5B,SAASC,EAAMC,GAC5B,IAAMC,EAAQC,mBADqB,EAENC,YAAUC,IAAYC,KAA3CC,EAF2B,EAE3BA,MAAOC,EAFoB,EAEpBA,UAEf,OACE,yCAAOC,IAAKP,GAAWD,EAAvB,CAA8BS,QAAS,OACrC,2BAAOC,KAAK,wBACV,2BAAOC,SAAU,EAAEC,KAAKC,GAAK,EAAG,EAAG,IACjC,0BACEC,YAAU,EACVC,eAAa,EACbC,SAAUT,EAAU,kBACpBU,SAAUX,EAAMY,oCAAoCD,SACpDP,KAAK,2CCZjB,IAAMS,EAAM,SAACnB,GACX,IAAMoB,EAAYlB,mBAMlB,OAJAmB,aAAS,WACPD,EAAKE,QAAQX,SAASY,EAAIH,EAAKE,QAAQX,SAASa,GAAK,OAIrD,0CACMxB,EADN,CAEEQ,IAAKY,IAEL,uCAAmBK,KAAM,CAAC,EAAG,EAAG,KAChC,0CAAsBC,MAAO,cAK7BC,EAAQ,SAAC3B,GACb,OACE,yBACMA,EACJ,yCAAqB4B,OAAO,WAAWH,KAAM,CAAC,EAAG,KACjD,0CAAsBC,MAAO,YAK7BG,EAAS,SAAC7B,GAAgB,IAAD,EACD8B,mBAAS,GADR,mBACrBC,EADqB,KACdC,EADc,KAEvBxB,EAAWN,mBACT+B,EAAqBC,cAArBD,iBAeR,OAbAE,qBAAU,WAAWF,EAAiBzB,EAAIc,WAAU,CAACW,IACrDZ,aAAS,WACPW,EAASD,EAAQ,KACjB,IAAMR,EAAI,EAAIX,KAAKwB,IAAIL,GACjBM,EAAI,EAAIzB,KAAK0B,IAAIP,GAEvBvB,EAAIc,QAAQiB,SAAShB,EAAIA,EACzBf,EAAIc,QAAQiB,SAASF,EAAIA,EAEzB7B,EAAIc,QAAQkB,OAAO,IAAIC,UAAc,EAAG,EAAG,IAE3CjC,EAAIc,QAAQoB,uBAEP,qDAAmBlC,IAAKA,GAASR,KA8B3B2C,EA3BD,WACZ,OACE,yBAAKC,UAAU,mBACb,kBAAC,IAAD,CAAQC,WAAS,GACf,kBAAC,EAAD,CAAQN,SAAU,CAAC,EAAG,EAAG,MACzB,uCACA,sCACEb,MAAO,UACPoB,UAAW,EACXhC,YAAU,EAACyB,SAAU,CAAC,EAAG,EAAG,GAC5BQ,uBAAsB,KACtBC,wBAAuB,KACvBC,oBAAmB,IACnBC,sBAAqB,GACrBC,sBAAqB,GACrBC,oBAAmB,GACnBC,wBAAuB,KAEzB,kBAAC,WAAD,CAAUC,SAAU,kBAAC,EAAD,CAAKf,SAAU,CAAC,EAAG,EAAG,MACxC,kBAACxC,EAAD,CAAOgB,eAAa,EAACD,YAAU,EAACyC,MAAO,CAAC,IAAM,IAAM,QAEtD,kBAAC,EAAD,CAAOxC,eAAa,EAACwC,MAAO,CAAC,GAAI,IAAK5C,SAAU,EAAEC,KAAKC,GAAK,EAAG,EAAG,Q,iBChE3D2C,G,MARF,WACX,OACE,yBAAKZ,UAAU,kBACb,yBAAKa,IAAI,OAAOC,IAAKC,S,QCKZC,G,MARG,WAChB,OACE,yBAAKhB,UAAU,uBACb,kBAAC,IAAD,CAAWiB,KAAM,IAAIC,KAAK,iB,QCOjBC,G,MAVkB,WAAO,IAC9BC,EAAMC,YAAe,UAArBD,EAER,OACE,yBAAKpB,UAAU,mCACZoB,EAAE,mBCSME,MAXf,WACE,OACE,yBAAKtB,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCDcuB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4BCLAC,EAAsB,CAC1BC,GAAI,CAAEC,O,OACNC,GAAI,CAAED,O,OACNE,GAAI,CAAEF,O,OACNG,GAAI,CAAEH,O,QAGRI,IACGC,IAAIC,KACJD,IAAIE,KACJC,KAAK,CACJC,UAf+B,CACjCC,MAAO,CAAE,cAePZ,YACAa,GAAI,CAAE,UACNC,YAAa,KACbC,cAAe,CAAE,KAAM,KAAM,KAAM,MACnCC,cAAe,CACbC,aAAa,GAEfC,OAAO,IAGIZ,EAAf,EC3BAa,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SF+HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.79d4cc33.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/kuisti.6234025e.glb\";","module.exports = __webpack_public_path__ + \"static/media/kuisti.b8ac4353.png\";","import React, { useRef } from 'react'\nimport { useLoader } from 'react-three-fiber'\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader'\nimport kuisti from './kuisti.glb';\n\nexport default function Model(props) {\n  const group = useRef()\n  const { nodes, materials } = useLoader(GLTFLoader, kuisti)\n\n  return (\n    <group ref={group} {...props} dispose={null}>\n      <scene name=\"Tinkercad GLTF Scene\">\n        <group rotation={[-Math.PI / 2, 0, 0]}>\n          <mesh\n            castShadow\n            receiveShadow\n            material={materials['lambert2SG.001']}\n            geometry={nodes.Mesh_Mesh_head_geo001_lambert2SG001.geometry}\n            name=\"Mesh_Mesh_head_geo001_lambert2SG001\"\n          />\n        </group>\n      </scene>\n    </group>\n  )\n}\n","import React, { useRef, useState, Suspense, useEffect } from 'react';\nimport './style.css';\nimport * as THREE from 'three';\nimport { Canvas, useFrame, useThree } from 'react-three-fiber';\nimport Model from './Kuisti';\n\nconst Box = (props: any) => {\n  const mesh: any = useRef();\n\n  useFrame(() => {\n    mesh.current.rotation.x = mesh.current.rotation.y += 0.01;\n  });\n\n  return (\n    <mesh\n      {...props}\n      ref={mesh}\n    >\n      <boxBufferGeometry args={[1, 1, 1]} />\n      <meshStandardMaterial color={'hotpink'} />\n    </mesh>\n  );\n};\n\nconst Plane = (props:any) => {\n  return (\n    <mesh\n      {...props}>\n      <planeBufferGeometry attach=\"geometry\" args={[1, 1]} />\n      <meshStandardMaterial color={'green'} />\n    </mesh>\n  );\n};\n\nconst Camera = (props: any) => {\n  const [ angle, setAngle ] = useState(0.0);\n  const ref: any = useRef();\n  const { setDefaultCamera } = useThree();\n  // Make the camera known to the system\n  useEffect(() => void setDefaultCamera(ref.current), [setDefaultCamera]);\n  useFrame(() => {\n    setAngle(angle + 0.01);\n    const x = 9 * Math.cos(angle);\n    const z = 9 * Math.sin(angle);\n\n    ref.current.position.x = x;\n    ref.current.position.z = z;\n        \n    ref.current.lookAt(new THREE.Vector3(0, 0, 0));\n\n    ref.current.updateMatrixWorld();\n  });\n  return <perspectiveCamera ref={ref} {...props} />;\n};\n\nconst Three = () => {\n  return (\n    <div className=\"three-container\">\n      <Canvas shadowMap>\n        <Camera position={[0, 5, 10]} />\n        <ambientLight />\n        <directionalLight \n          color={'#FFF400'}\n          intensity={2}\n          castShadow position={[5, 4, 5]} \n          shadow-mapSize-width={2048}\n          shadow-mapSize-height={2048}\n          shadow-camera-far={5000}\n          shadow-camera-left={-10}\n          shadow-camera-right={10}\n          shadow-camera-top={10}\n          shadow-camera-bottom={-10}\n        />\n        <Suspense fallback={<Box position={[0, 0, 0]} />}>\n          <Model receiveShadow castShadow scale={[0.02, 0.02, 0.02]}/>   \n        </Suspense>\n        <Plane receiveShadow scale={[30, 30]} rotation={[-Math.PI / 2, 0, 0]}/>\n      </Canvas>\n    </div>\n  );\n};\n\nexport default Three;","import React from 'react';\nimport logo from '../../kuisti.png'\nimport './style.css';\n\nconst Logo = () => {\n  return (\n    <div className=\"logo-container\">\n      <img alt=\"logo\" src={logo} />\n    </div>\n  )\n}\n\nexport default Logo\n\n","import React from 'react'\nimport Countdown from 'react-countdown'\nimport './style.css'\n\nconst CountDown = () => {\n  return (\n    <div className=\"countdown-container\">\n      <Countdown date={new Date(1630314300000)} />\n    </div>\n  )\n}\n\nexport default CountDown","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport './style.css';\n\nconst WelcomeToEnjoy: React.FC = () => {\n  const { t } = useTranslation('common');\n\n  return (\n    <div className=\"tervetuloa-nauttimaan-container\">\n      {t('welcome_text')}\n    </div>\n  );\n};\n\nexport default WelcomeToEnjoy;\n","import React from 'react'\nimport './App.css'\nimport Three from './components/three'\nimport Logo from './components/logo'\nimport CountDown from './components/countdown'\nimport WelcomeToEnjoy from './components/WelcomeToEnjoy'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Three />\n      <Logo />\n      <WelcomeToEnjoy />\n      <CountDown />\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import i18n, { Resource } from 'i18next';\nimport LanguageDetector, { DetectorOptions } from 'i18next-browser-languagedetector';\nimport { initReactI18next } from 'react-i18next';\n\nimport commonEn from './locales/en/common.json';\nimport commonFi from './locales/fi/common.json';\nimport commonDe from './locales/de/common.json';\nimport commonRu from './locales/ru/common.json';\n\nconst detection: DetectorOptions = {\n  order: [ 'navigator' ],\n};\n\nconst resources: Resource = {\n  en: { common: commonEn },\n  fi: { common: commonFi },\n  de: { common: commonDe },\n  ru: { common: commonRu },\n};\n\ni18n\n  .use(LanguageDetector)\n  .use(initReactI18next)\n  .init({\n    detection,\n    resources,\n    ns: [ 'common' ],\n    fallbackLng: 'en',\n    supportedLngs: [ 'en', 'fi', 'de', 'ru' ],\n    interpolation: {\n      escapeValue: false,\n    },\n    debug: false,\n  });\n\nexport default i18n;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './i18n';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}